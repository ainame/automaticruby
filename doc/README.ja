automaticruby

名前
 automaticruby - Ruby による汎用的な自動処理フレームワーク

書式
$ ./app.rb

 任意のレシピを指定して起動する
$ ./app.rb -c <recipe>

 バージョン番号を表示する
$ ./automatic.rb -v

説明
 このソフトウェアは、プラガブルに機能を拡張可能な Ruby
による汎用自動処理フレームワークである。
 プラグインによってさまざまな情報を収集加工し、任意の
形で出力することができる。


============
インストール
============

 本ソフトウェアを GitHub がらダウンロードする。
$ git clone git://github.com/id774/automaticruby.git


 ruby 1.9 の場合
$ script/bootstrap

 ruby 1.8 の場合
 Gemfile にある必要な gem を手動でインストールする


 任意のレシピ (後述) を作成する。
$ app.rb -c your_recipe.yml

 -c オプション付きで手動実行し、問題がなければ
 cron に登録するなどして自動化する。


============
実行してみる
============

 試しに実行するなら test/integration/feed2console.yml
を利用すると良い。

$ ./app.rb -c test/integration/feed2console.yml

 これは、ブログのフィードを単純にコンソール出力するだけの
簡単なレシピである。
 本ソフトウェアの動作確認に使うことができる。


==========================
ディレクトリとファイル構成
==========================
.
|
+- app.rb
|    実行ファイル本体
|
+- config
|   |
|   +- default.yml
|        デフォルトでロードされるレシピ
|        YAML 形式でプラグインの情報を記述する
|        automatic.rb の -c オプションの引数で
|        任意のファイル名をレシピとして指定できる
|
|   新しくレシピを書いた場合は config ディレクトリに置く
|
|
+- plugins
|   |
|   +- subscription フィードを購読するプラグイン
|   |
|   +- filter 情報をフィルタリングするプラグイン
|   |
|   +- store 情報を内部に保存するプラグイン
|   |
|   +- publish 外部に情報を送信するプラグイン
|
|   プラグインを開発した場合は plugins ディレクトリに置く
|
|
+- lib
|   |
|   +- automatic.rb
|   |    Automatic モジュールの定義をする
|   |
|   +- automatic
|   |   |
|   |   +- environment.rb
|   |   |    環境情報を読み込む
|   |   |
|   |   +- pipeline.rb
|   |   |    パイプラインと呼ばれるオブジェクトを利用し
|   |   |    レシピに書かれたプラグインに処理を順次受け渡す
|   |   |
|   |   +- feed_parser.rb
|   |   |    フィードを解析する
|   |   |
|   |   +- log.rb
|   |   |    ログを出力する
|   |   |
|   |   +- recipe.rb
|   |        レシピを読み込む
|   |
|   +- config
|
+- db
|   |
|   +- permalink.db
|        Store::Permalink プラグインで収集された
|        ブックマークが保存される
|
+- utils
|   |
|   +- opml_parser.rb
|        OPML からフィードの URL を抽出する
|        既存の RSS Reader からの移行用ツールである
|
+- spec
|    ユニットテスト用ディレクトリ
|
+- test
|   |
|   +- integration
|        インテグレーションテスト用ディレクトリ
|
+- doc
    |
    +- COPYING
    |    本ソフトウェアのライセンス
    |
    +- PLUGINS.ja
    |    プラグインについてのドキュメント
    |
    +- README.ja
         本ドキュメント


==========
レシピとは
==========

 Automatic Ruby では YAML 形式で書かれた設定ファイル
を解析し、呼び出すプラグインの情報とそれに伴う様々な
情報を読み込む。

 この YAML ファイルをレシピと呼ぶ。

 automatic.rb 起動時に -c オプションの引数にレシピの
ファイル名を指定することができる。オプションが省略
された場合は config/default.yml が呼ばれる。

[起動例]
$ app.rb -c ~/recipes/your_recipe.yml


================
レシピの記述方法
================

 レシピには暗黙的な命名規則がある。
 以下はレシピのサンプルとなる YAML ファイルである。

global:
  timezone: Asia/Tokyo
  cache:
    base: /tmp
  log:
    level: info

plugins:
  - module: SubscriptionFeed
    config:
      feeds:
        - http://example.com/rss2
        - http://hogefuga.com/feed

  - module: FilterIgnore
    config:
      link:
        - hoge
        - fuga

  - module: StorePermalink
    config:
      db: permalink.db

  - module: PublishHatenaBookmark
    config:
      username: your_hatena_id
      password: your_password
      interval: 5

このサンプルレシピの例では
1. フィードを購読し
2. 無視キーワードを含む URL を除外し
3. パーマリンクをデータベースに保存し
4. はてなブックマークをする
という一連の処理をプラグインの組み合わせで実現している。

このように、プラグインと設定情報をレシピに記述するだけで
複数のプラグインの組み合わせにより自由な処理を実現できる。

たとえば Twitter に投稿する Publish::Twitter プラグインを
作成し上記のレシピに記述すれば、自動的に記事を Twitter に
投稿する自動処理が完成する。

Gmail に送信する Publish::Gmail プラグインを作成しレシピ
に追加すれば、フィードの記事を Gmail で読めるようになる。

他にもリンクを元にブログ記事全文を取得したり、電子書籍の
形式にして Kindle で読めるようにしたり、データベースに
ブログ記事全文を保存してローカルのアプリで読めるように
したりなど、プラグインの組み合わせ次第で無限の可能性を
実現することができる。



==================
プラグインの作り方
==================

 たとえば自動処理した何らかの情報を Twitter に投稿したい。

 このようなときは Publish::Twitter プラグインを作れば良い。

 実装方法については後述するが、基本的には Twitter の API に
投稿するだけの簡単な Ruby スクリプトを作るだけである。

 レシピはこのようになるだろう。

  - module: PublishTwitter
    config:
      username: your_mail_address
      password: your_password

 この場合、ファイルを plugins/publish 配下に置き、クラス名
はレシピで指定した PublishTwitter とする。あとは後述する
Automatic::Pipeline の機能により自動的に処理される。



========================
Automatic::Pipeline とは
========================

 本フレームワークはレシピを YAML で解析し、プラグインを
順次読み込む。このとき pipeline がインスタンス生成時の
引数として渡され、戻り値は pipeline に戻る。

 コードは以下の通りである。

 pipeline = []
 recipe.each_plugin do |plugin|
   load_plugin(plugin.module)
   klass = Automatic::Plugin.const_get(plugin.module)
   pipeline = klass.new(plugin.config, pipeline).run
 end

 プラグイン間での連続した pipeline の受け渡しにより
処理要素を直列に連結し、あるプラグインの出力が次の
プラグインの入力となるパイプライン処理を実現する。

 この機構を本フレームワークでは Automatic::Pipeline と呼ぶ。



======================
プラグインの実装ルール
======================

 プラグインのコンストラクタは YAML.load によってロード
されたハッシュの配列、及びパイプラインと呼ばれる
インスタンス変数のオブジェクトを引数に取る。

 推奨されるコンストラクタの実装例は以下の通りである。

def initialize(config, pipeline=[])
  @config = config
  @pipeline = pipeline
end

 インスタンスメソッド run が自動的に呼ばれる。
 戻り値はインスタンス変数 @pipeline に渡り、レシピで
定義された次のプラグインに引き渡される。


==============
ユニットテスト
==============

 ユニットテストは RSpec でおこなう。

 プラグインのテストは、引数となるパイプラインを渡し
戻り値を検査する。


========================
継続的インテグレーション
========================

 CI は Jenkins でおこなう。
 http://id774.net/jenkins/


========
結合試験
========

 結合試験用プラグイン Publish::Console を使うと
単純に入力されたパイプラインをコンソールに出力する
ためデバッグの際に有効である。



================
プラグインの説明
================

doc/PLUGINS.ja を参照



====================
その他のツールの説明
====================

名前
 utils/opml_parser.rb

説明
 既存の RSS Reader の OPML から登録済みフィードの
URL リストを抽出するのに使う。

$ ruby opml_parser.rb > feeds.txt


名前
 utils/auto_discovery.rb

説明
 引数に指定した URL から購読対象のフィードを
オートディスカバリで抽出する。

$ ruby auto_discovery.rb "https://twitter.com/twitt"
["https://twitter.com/statuses/user_timeline/4441691.rss",
 "https://twitter.com/favorites/4441691.rss"]



====
TODO
====

 本フレームワークはまだ開発開始からまもなく、そのため
まだまだ多数の TODO を抱えている。

プラグイン
----------
 プラグインの種類がもっと豊富に欲しい。
 これはアイデア次第で無限に追加可能であろう。

 - Gmail にフィードを送る
 - 電子書籍化する
 - エントリの全文取得をする
 - データベースに蓄積する
 - なんでもフィード化する
 - Twitter を購読する
 - Facebook を購読する
 - mixi を購読する

 パイプラインにハッシュ化されたフィードの配列が入っている
のでこれを利用してさまざまな機能を実現できる。

 詳細は GitHub の issues を参照
 https://github.com/id774/automaticruby/issues



========
動作環境
========

Ruby 1.8 以降


以下の gem パッケージに依存

sqlite3
activesupport
hashie
activerecord
gcalapi
xml-simple

詳細は Gemfile を参照


========
注意事項
========

悪用せず、常識の範囲の利用に留めること。

本ソフトウェアでは GPLv3 ライセンスのみ許可する。
ライセンス違反の無いようにすること。


